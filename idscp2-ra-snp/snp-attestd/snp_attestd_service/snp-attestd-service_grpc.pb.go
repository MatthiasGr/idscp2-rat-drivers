// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: snp-attestd-service.proto

package snp_attestd_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnpAttestdServiceClient is the client API for SnpAttestdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnpAttestdServiceClient interface {
	GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	VerifyReport(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type snpAttestdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnpAttestdServiceClient(cc grpc.ClientConnInterface) SnpAttestdServiceClient {
	return &snpAttestdServiceClient{cc}
}

func (c *snpAttestdServiceClient) GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/SnpAttestdService/getReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snpAttestdServiceClient) VerifyReport(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/SnpAttestdService/verifyReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnpAttestdServiceServer is the server API for SnpAttestdService service.
// All implementations must embed UnimplementedSnpAttestdServiceServer
// for forward compatibility
type SnpAttestdServiceServer interface {
	GetReport(context.Context, *ReportRequest) (*ReportResponse, error)
	VerifyReport(context.Context, *VerifyRequest) (*VerifyResponse, error)
	mustEmbedUnimplementedSnpAttestdServiceServer()
}

// UnimplementedSnpAttestdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnpAttestdServiceServer struct {
}

func (UnimplementedSnpAttestdServiceServer) GetReport(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedSnpAttestdServiceServer) VerifyReport(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyReport not implemented")
}
func (UnimplementedSnpAttestdServiceServer) mustEmbedUnimplementedSnpAttestdServiceServer() {}

// UnsafeSnpAttestdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnpAttestdServiceServer will
// result in compilation errors.
type UnsafeSnpAttestdServiceServer interface {
	mustEmbedUnimplementedSnpAttestdServiceServer()
}

func RegisterSnpAttestdServiceServer(s grpc.ServiceRegistrar, srv SnpAttestdServiceServer) {
	s.RegisterService(&SnpAttestdService_ServiceDesc, srv)
}

func _SnpAttestdService_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpAttestdServiceServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnpAttestdService/getReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpAttestdServiceServer).GetReport(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnpAttestdService_VerifyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnpAttestdServiceServer).VerifyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SnpAttestdService/verifyReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnpAttestdServiceServer).VerifyReport(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnpAttestdService_ServiceDesc is the grpc.ServiceDesc for SnpAttestdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnpAttestdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SnpAttestdService",
	HandlerType: (*SnpAttestdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getReport",
			Handler:    _SnpAttestdService_GetReport_Handler,
		},
		{
			MethodName: "verifyReport",
			Handler:    _SnpAttestdService_VerifyReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snp-attestd-service.proto",
}
